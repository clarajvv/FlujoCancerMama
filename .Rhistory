}
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Quitar el comentario de los args !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#args = commandArgs(trailingOnly = TRUE, asVaule = False)
args <- c(1, 2)
if (length(args) < 2) {
stop("Two breast cancer type must be supplied (Basal, LumA or TNBC) ", call.=FALSE)
}else if((args[1] == 1 & args[2] == 2) | (args[1] == 2 & args[2] == 1)){
# Basal - LuminalA
if(!file.exists("Data/preDeaBasalLumA.RData")){
subBasal <- subsettingBasal()
subLumA <-  subsettingLumA()
preDEA <- matricesCombinationDEA(d1 = subBasal, d2 = subLumA, nombreSubtipo1 = "Basal", nombreSubtipo2 =  "LuminalA")
save(preDEA, file = "Data/preDeaBasalLumA.RData")
}
file_datos_DEA <- "Data/preDeaBasalLumA.RData"
}else if((args[1] == 1 & args[2] == 3) | (args[1] == 3 & args[2] == 1)){
# Basal - TNBC
if(!file.exists("Data/preDeaBasalTNBC.RData")){
subBasal <- subsettingBasal()
subTNBC <-  subsettingTNBC()
preDEA <- matricesCombinationDEA(d1 = subBasal, d2 = subTNBC, nombreSubtipo1 = "Basal", nombreSubtipo2 =  "TNBC")
save(preDEA, file = "Data/preDeaBasalTNBC.RData")
}
file_datos_DEA <- "Data/preDeaBasalTNBC.RData"
}else if((args[1] == 2 & args[2] == 3) | (args[1] == 3 & args[2] == 2)){
# LumA - TNBC
if(!file.exists("Data/preDeaBasalTNBC.RData")){
subLumA <- subsettingLumA()
subTNBC <-  subsettingTNBC()
preDEA <- matricesCombinationDEA(d1 = subLumA, d2 = subTNBC, nombreSubtipo1 = "LuminalA", nombreSubtipo2 =  "TNBC")
save(preDEA, file = "Data/preDeaLumATNBC.RData")
}
file_datos_DEA <- "Data/preDeaLumATNBC.RData"
}else{
stop("It must be two argument with the following code: Basal-> 1, LumA-> 2 and TNBC-> 3")
}
###########################################################
## Pasar al DEA count y design de la combinación solicitada. También pasar la combinación?
load(file_datos_DEA)
if (length(args) < 2) {
stop("Two breast cancer type must be supplied (Basal, LumA or TNBC) ", call.=FALSE)
}else if((args[1] == 1 & args[2] == 2) | (args[1] == 2 & args[2] == 1)){
# Basal - LuminalA
if(!file.exists("Data/preDeaBasalLumA.RData")){
subBasal <- subsettingBasal()
subLumA <-  subsettingLumA()
preDEA <- matricesCombinationDEA(d1 = subBasal, d2 = subLumA, nombreSubtipo1 = "Basal", nombreSubtipo2 =  "LuminalA")
save(preDEA, file = "Data/preDeaBasalLumA.RData")
}
file_datos_DEA <- "Data/preDeaBasalLumA.RData"
}else if((args[1] == 1 & args[2] == 3) | (args[1] == 3 & args[2] == 1)){
# Basal - TNBC
if(!file.exists("Data/preDeaBasalTNBC.RData")){
subBasal <- subsettingBasal()
subTNBC <-  subsettingTNBC()
preDEA <- matricesCombinationDEA(d1 = subBasal, d2 = subTNBC, nombreSubtipo1 = "Basal", nombreSubtipo2 =  "TNBC")
save(preDEA, file = "Data/preDeaBasalTNBC.RData")
}
file_datos_DEA <- "Data/preDeaBasalTNBC.RData"
}else if((args[1] == 2 & args[2] == 3) | (args[1] == 3 & args[2] == 2)){
# LumA - TNBC
if(!file.exists("Data/preDeaBasalTNBC.RData")){
subLumA <- subsettingLumA()
subTNBC <-  subsettingTNBC()
preDEA <- matricesCombinationDEA(d1 = subLumA, d2 = subTNBC, nombreSubtipo1 = "LuminalA", nombreSubtipo2 =  "TNBC")
save(preDEA, file = "Data/preDeaLumATNBC.RData")
}
file_datos_DEA <- "Data/preDeaLumATNBC.RData"
}else{
stop("It must be two argument with the following code: Basal-> 1, LumA-> 2 and TNBC-> 3")
}
source('~/Universidad/HAB/Aurelio/FlujoCancerMama/Code/Options/2_1_SubsettingTumourSubtypes.R', encoding = 'UTF-8')
##########################################################
### Loading data for DEA
load("Data/datosParaDeA.RData")
##########################################################
### Libraries
source("Code/Settings/0_loadLibraries.R")
loadpkg("dplyr")
loadpkg("limma") # Differential gene expression analysis (DEA)
loadpkg("edgeR")
loadpkg("calibrate") # To label the volcano plot
##########################################################
### Loading data for DEA
load("Data/datosParaDeA.RData")
design <- unlist(preDEA["design"])
counts <- unlist(preDEA["counts"])
label <- unlist(preDEA["label"])
dge <- DGEList(counts=counts) #con datos de expresion genica digital
A <- rowSums(dge$counts)
isexpr <- A > 100 # Keeping genes with total counts more than 100.
dge <- calcNormFactors(dge)
v <- voom(dge[isexpr,], design, plot=FALSE)
length(dge[isexpr, ])
dim(design)
design
str(design)
dge <- DGEList(counts=counts) #con datos de expresion genica digital
str(dge)
dge$counts
rowSums((dge$counts
))
rowSums((dge$counts))
A <- rowSums(dge$counts)
isexpr <- A > 100
dge <- calcNormFactors(dge)
dge
dge[isexpr, ]
v <- voom(dge[isexpr,], design, plot=FALSE)
design
label
label
##########################################################
### Libraries
source("Code/Settings/0_loadLibraries.R")
loadpkg("dplyr")
loadpkg("limma") # Differential gene expression analysis (DEA)
loadpkg("edgeR")
loadpkg("calibrate") # To label the volcano plot
##########################################################
### Loading data for DEA
load("Data/datosParaDeA.RData")
design <- unlist(preDEA["design"])
counts <- unlist(preDEA["counts"])
label <- unlist(preDEA["label"])
label
str(label)
str(counts)
matricesCombinationDEA <- function(d1, d2, nombreSubtipo1, nombreSubtipo2){
rnaseq.for.de <- cbind(d1, d2)
counts <-  rnaseq.for.de[apply(rnaseq.for.de, 1, function(x) sum(x==0)) < ncol(rnaseq.for.de)*0.8, ]
print(str(counts))
# Create a design matrix thar contains the RNA samples that are applied to each category (TNBC vs luminal)
df.l <- data_frame("sample" = colnames(d1), "status" = rep(0, length(colnames(d1))) )
df.t <- data_frame("sample" = colnames(d2), "status" = rep(1, length(colnames(d2))) )
df <- rbind(df.t,df.l)
design <- model.matrix(~ status, data = df) #se quedan con 0 las que sean de tnbc y con 1s las que son de luminal
# We have to return counts, design and etiqueta para el DEA
label <- paste("Differential Expression analysis of breast cancer subtypes:", nombreSubtipo1, "vs ", nombreSubtipo2, sep = " ")
return(list("counts" = counts, "design" = design, "label" = label))
}
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Quitar el comentario de los args !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#args = commandArgs(trailingOnly = TRUE, asVaule = False)
args <- c(1, 2)
if (length(args) < 2) {
stop("Two breast cancer type must be supplied (Basal, LumA or TNBC) ", call.=FALSE)
}else if((args[1] == 1 & args[2] == 2) | (args[1] == 2 & args[2] == 1)){
# Basal - LuminalA
if(!file.exists("Data/preDeaBasalLumA.RData")){
subBasal <- subsettingBasal()
subLumA <-  subsettingLumA()
preDEA <- matricesCombinationDEA(d1 = subBasal, d2 = subLumA, nombreSubtipo1 = "Basal", nombreSubtipo2 =  "LuminalA")
save(preDEA, file = "Data/preDeaBasalLumA.RData")
}
file_datos_DEA <- "Data/preDeaBasalLumA.RData"
}else if((args[1] == 1 & args[2] == 3) | (args[1] == 3 & args[2] == 1)){
# Basal - TNBC
if(!file.exists("Data/preDeaBasalTNBC.RData")){
subBasal <- subsettingBasal()
subTNBC <-  subsettingTNBC()
preDEA <- matricesCombinationDEA(d1 = subBasal, d2 = subTNBC, nombreSubtipo1 = "Basal", nombreSubtipo2 =  "TNBC")
save(preDEA, file = "Data/preDeaBasalTNBC.RData")
}
file_datos_DEA <- "Data/preDeaBasalTNBC.RData"
}else if((args[1] == 2 & args[2] == 3) | (args[1] == 3 & args[2] == 2)){
# LumA - TNBC
if(!file.exists("Data/preDeaBasalTNBC.RData")){
subLumA <- subsettingLumA()
subTNBC <-  subsettingTNBC()
preDEA <- matricesCombinationDEA(d1 = subLumA, d2 = subTNBC, nombreSubtipo1 = "LuminalA", nombreSubtipo2 =  "TNBC")
save(preDEA, file = "Data/preDeaLumATNBC.RData")
}
file_datos_DEA <- "Data/preDeaLumATNBC.RData"
}else{
stop("It must be two argument with the following code: Basal-> 1, LumA-> 2 and TNBC-> 3")
}
subBasal <- subsettingBasal()
source("Code/Settings/0_loadLibraries.R") # No sé si es necesario llamar al script o con bash se hace solo
loadpkg("dplyr")
load("Data/brca_rnaseq_tumour.RData") # No sé si es la mejor forma de traerme los datos
load("Data/sample_data.RData")
subsettingTNBC <- function(){
tnbc_samples <- sample_data %>% dplyr::filter(`ER Status` == "Negative" & `PR Status` == "Negative" & `HER2 Final Status` == "Negative" & `PAM50 mRNA` != "Luminal A")
tnbc_barcodes <- tnbc_samples$`Complete TCGA ID`
brca_rnaseq.tnbc <- brca_rnaseq.tumour[, which(colnames(brca_rnaseq.tumour) %in% tnbc_barcodes)]
return(brca_rnaseq.tnbc)
}
subsettingLumA <- function(){
luminal_samples <- sample_data %>% dplyr::filter(`PAM50 mRNA` == "Luminal A")
luminal_barcodes <- luminal_samples$`Complete TCGA ID`
brca_rnaseq.luminal <- brca_rnaseq.tumour[, which(colnames(brca_rnaseq.tumour) %in% luminal_barcodes)]
return(brca_rnaseq.luminal)
}
subsettingBasal <- function(){
basal_samples <- sample_data %>% dplyr::filter(`PAM50 mRNA` == "Basal-like")
basal_barcodes <- basal_samples$`Complete TCGA ID`
brca_rnaseq.basal <- brca_rnaseq.tumour[, which(colnames(brca_rnaseq.tumour) %in% basal_barcodes)]
return(brca_rnaseq.basal)
}
matricesCombinationDEA <- function(d1, d2, nombreSubtipo1, nombreSubtipo2){
rnaseq.for.de <- cbind(d1, d2)
counts <-  rnaseq.for.de[apply(rnaseq.for.de, 1, function(x) sum(x==0)) < ncol(rnaseq.for.de)*0.8, ]
print(str(counts))
# Create a design matrix thar contains the RNA samples that are applied to each category (TNBC vs luminal)
df.l <- data_frame("sample" = colnames(d1), "status" = rep(0, length(colnames(d1))) )
df.t <- data_frame("sample" = colnames(d2), "status" = rep(1, length(colnames(d2))) )
df <- rbind(df.t,df.l)
design <- model.matrix(~ status, data = df) #se quedan con 0 las que sean de tnbc y con 1s las que son de luminal
# We have to return counts, design and etiqueta para el DEA
label <- paste("Differential Expression analysis of breast cancer subtypes:", nombreSubtipo1, "vs ", nombreSubtipo2, sep = " ")
return(list("counts" = counts, "design" = design, "label" = label))
}
subBasal <- subsettingBasal()
subTNBC <-  subsettingTNBC()
preDEA <- matricesCombinationDEA(d1 = subBasal, d2 = subTNBC, nombreSubtipo1 = "Basal", nombreSubtipo2 =  "TNBC")
matricesCombinationDEA <- function(d1, d2, nombreSubtipo1, nombreSubtipo2){
rnaseq.for.de <- cbind(d1, d2)
counts <-  rnaseq.for.de[apply(rnaseq.for.de, 1, function(x) sum(x==0)) < ncol(rnaseq.for.de)*0.8, ]
print(str(counts))
# Create a design matrix thar contains the RNA samples that are applied to each category (TNBC vs luminal)
df.l <- data_frame("sample" = colnames(d1), "status" = rep(0, length(colnames(d1))) )
df.t <- data_frame("sample" = colnames(d2), "status" = rep(1, length(colnames(d2))) )
df <- rbind(df.t,df.l)
design <- model.matrix(~ status, data = df) #se quedan con 0 las que sean de tnbc y con 1s las que son de luminal
print(str(design))
# We have to return counts, design and etiqueta para el DEA
label <- paste("Differential Expression analysis of breast cancer subtypes:", nombreSubtipo1, "vs ", nombreSubtipo2, sep = " ")
print(label)
return(list("counts" = counts, "design" = design, "label" = label))
}
preDEA <- matricesCombinationDEA(d1 = subBasal, d2 = subTNBC, nombreSubtipo1 = "Basal", nombreSubtipo2 =  "TNBC")
str(design)
str(counts)
subBasal <- subsettingBasal()
subTNBC <-  subsettingTNBC()
preDEA <- matricesCombinationDEA(d1 = subBasal, d2 = subTNBC, nombreSubtipo1 = "Basal", nombreSubtipo2 =  "TNBC")
matricesCombinationDEA <- function(d1, d2, nombreSubtipo1, nombreSubtipo2){
rnaseq.for.de <- cbind(d1, d2)
counts <-  rnaseq.for.de[apply(rnaseq.for.de, 1, function(x) sum(x==0)) < ncol(rnaseq.for.de)*0.8, ]
print("counts")
print(str(counts))
# Create a design matrix thar contains the RNA samples that are applied to each category (TNBC vs luminal)
df.l <- data_frame("sample" = colnames(d1), "status" = rep(0, length(colnames(d1))) )
df.t <- data_frame("sample" = colnames(d2), "status" = rep(1, length(colnames(d2))) )
df <- rbind(df.t,df.l)
design <- model.matrix(~ status, data = df) #se quedan con 0 las que sean de tnbc y con 1s las que son de luminal
print("design")
print(str(design))
# We have to return counts, design and etiqueta para el DEA
label <- paste("Differential Expression analysis of breast cancer subtypes:", nombreSubtipo1, "vs ", nombreSubtipo2, sep = " ")
print("label")
print(label)
return(list("counts" = counts, "design" = design, "label" = label))
}
subsettingBasal <- function(){
basal_samples <- sample_data %>% dplyr::filter(`PAM50 mRNA` == "Basal-like")
basal_barcodes <- basal_samples$`Complete TCGA ID`
brca_rnaseq.basal <- brca_rnaseq.tumour[, which(colnames(brca_rnaseq.tumour) %in% basal_barcodes)]
return(brca_rnaseq.basal)
}
subBasal <- subsettingBasal()
subTNBC <-  subsettingTNBC()
preDEA <- matricesCombinationDEA(d1 = subBasal, d2 = subTNBC, nombreSubtipo1 = "Basal", nombreSubtipo2 =  "TNBC")
str(design)
design <- preDEA["design"]
counts <- preDEA["counts"]
label <- preDEA["label"]
str(design)
str(counts)
label
dge <- DGEList(counts=counts) #con datos de expresion genica digital
str(counts)
dge <- DGEList(counts=counts[[1]]) #con datos de expresion genica digital
counts[[1]]
str(counts[[1]])
str(design)
source("Code/Settings/0_loadLibraries.R") # No sé si es necesario llamar al script o con bash se hace solo
loadpkg("dplyr")
load("Data/brca_rnaseq_tumour.RData") # No sé si es la mejor forma de traerme los datos
load("Data/sample_data.RData")
subsettingTNBC <- function(){
tnbc_samples <- sample_data %>% dplyr::filter(`ER Status` == "Negative" & `PR Status` == "Negative" & `HER2 Final Status` == "Negative" & `PAM50 mRNA` != "Luminal A")
tnbc_barcodes <- tnbc_samples$`Complete TCGA ID`
brca_rnaseq.tnbc <- brca_rnaseq.tumour[, which(colnames(brca_rnaseq.tumour) %in% tnbc_barcodes)]
return(brca_rnaseq.tnbc)
}
subsettingLumA <- function(){
luminal_samples <- sample_data %>% dplyr::filter(`PAM50 mRNA` == "Luminal A")
luminal_barcodes <- luminal_samples$`Complete TCGA ID`
brca_rnaseq.luminal <- brca_rnaseq.tumour[, which(colnames(brca_rnaseq.tumour) %in% luminal_barcodes)]
return(brca_rnaseq.luminal)
}
subsettingBasal <- function(){
basal_samples <- sample_data %>% dplyr::filter(`PAM50 mRNA` == "Basal-like")
basal_barcodes <- basal_samples$`Complete TCGA ID`
brca_rnaseq.basal <- brca_rnaseq.tumour[, which(colnames(brca_rnaseq.tumour) %in% basal_barcodes)]
return(brca_rnaseq.basal)
}
subBasal <- subsettingBasal()
subTNBC <-  subsettingTNBC()
d1 <- subBasal
d2 <- subTNBC
rnaseq.for.de <- cbind(d1, d2)
counts <-  rnaseq.for.de[apply(rnaseq.for.de, 1, function(x) sum(x==0)) < ncol(rnaseq.for.de)*0.8, ]
print("counts")
print(str(counts))
# Create a design matrix thar contains the RNA samples that are applied to each category (TNBC vs luminal)
df.l <- data_frame("sample" = colnames(d1), "status" = rep(0, length(colnames(d1))) )
df.t <- data_frame("sample" = colnames(d2), "status" = rep(1, length(colnames(d2))) )
df <- rbind(df.t,df.l)
design <- model.matrix(~ status, data = df) #se quedan con 0 las que sean de tnbc y con 1s las que son de luminal
print("design")
print(str(design))
# We have to return counts, design and etiqueta para el DEA
label <- paste("Differential Expression analysis of breast cancer subtypes:", nombreSubtipo1, "vs ", nombreSubtipo2, sep = " ")
dge <- DGEList(counts=counts[[1]]) #con datos de expresion genica digital
A <- rowSums(dge$counts)
isexpr <- A > 100 # Keeping genes with total counts more than 100.
dge <- calcNormFactors(dge)
v <- voom(dge[isexpr,], design, plot=FALSE)
v <- voom(dge[isexpr,], design, plot=FALSE)
dge <- calcNormFactors(dge)
v <- voom(dge[isexpr,], design, plot=FALSE)
dge[isexpr, ]
dge <- DGEList(counts=counts[[1]]) #con datos de expresion genica digital
A <- rowSums(dge$counts)
isexpr <- A > 50 # Keeping genes with total counts more than 100.
dge <- calcNormFactors(dge)
v <- voom(dge[isexpr,], design, plot=FALSE)
dge[isexpr, ]
isexpr <- A > 50 # Keeping genes with total counts more than 100.
isexpr
isexpr <- A > 1 # Keeping genes with total counts more than 100.
dge <- calcNormFactors(dge)
v <- voom(dge[isexpr,], design, plot=FALSE)
dge <- DGEList(counts=counts[[1]]) #con datos de expresion genica digital
dge
dge <- DGEList(counts=counts) #con datos de expresion genica digital
A <- rowSums(dge$counts)
isexpr <- A > 100 # Keeping genes with total counts more than 100.
dge <- calcNormFactors(dge)
v <- voom(dge[isexpr,], design, plot=FALSE)
# find genes differentially expression between the two groups of samples combined above
fit <- lmFit(v, design) #comparas los modelos de mas de 100 y el de antes
fit <- eBayes(fit)
diff.exp.df <- topTable(fit, coef = "status", n = Inf, sort = "p", p = 0.01) # Positive log-fold-changes mean higher expression in d1
#  hace tabla de genes con le ranking mas alto del modelo lineal
diff.exp.df$gene.name <- rownames(diff.exp.df)
source('~/Universidad/HAB/Aurelio/FlujoCancerMama/Code/Options/2_1_SubsettingTumourSubtypes.R', encoding = 'UTF-8')
source('~/Universidad/HAB/Aurelio/FlujoCancerMama/Code/Options/3_DEA.R')
design <- unlist(preDEA["design"])
##########################################################
### Libraries
source("Code/Settings/0_loadLibraries.R")
loadpkg("dplyr")
loadpkg("limma") # Differential gene expression analysis (DEA)
loadpkg("edgeR")
loadpkg("calibrate") # To label the volcano plot
##########################################################
### Loading data for DEA
load("Data/datosParaDeA.RData")
design <- unlist(preDEA["design"])
design
str(design)
str(preDEA["design"])
str(preDEA["design"][[1]])
str(preDEA["counts"][[1]])
label <- preDEA["label"][[1]]
label
##########################################################
### Loading data for DEA
load("Data/datosParaDeA.RData")
design <- preDEA["design"][[1]]
counts <- preDEA["counts"][[1]]
label <- preDEA["label"][[1]]
dge <- DGEList(counts=counts) #con datos de expresion genica digital
A <- rowSums(dge$counts)
isexpr <- A > 100 # Keeping genes with total counts more than 100.
dge <- calcNormFactors(dge)
v <- voom(dge[isexpr,], design, plot=FALSE)
# find genes differentially expression between the two groups of samples combined above
fit <- lmFit(v, design) #comparas los modelos de mas de 100 y el de antes
fit <- eBayes(fit)
diff.exp.df <- topTable(fit, coef = "status", n = Inf, sort = "p", p = 0.01) # Positive log-fold-changes mean higher expression in d1
#  hace tabla de genes con le ranking mas alto del modelo lineal
diff.exp.df$gene.name <- rownames(diff.exp.df)
# Output, Volcano plot
tab = data.frame(logFC = diff.exp.df$logFC, negLogPval = -log10(diff.exp.df$adj.P.Val))
tab2 = data.frame(logFC = diff.exp.df$logFC, negLogPval = -log10(diff.exp.df$adj.P.Val), Gene=diff.exp.df$gene.name)
lfc = 2
pval = 0.01
write.csv(filter(tab2, abs(logFC) > lfc & negLogPval > -log10(pval)), paste(label, ".csv", sep = "")) # write output
pdf(file = paste("Code/Results/VolcanoPlot_", label, ".pdf", sep = "")  width = 9, height = 4.5)
pdf(file = paste("Code/Results/VolcanoPlot_", label, ".pdf", sep = ""),  width = 9, height = 4.5)
par(mar = c(5, 4, 4, 5))
plot(tab, pch = 16, cex = 0.6, xlab = expression(log[2]~fold~change), ylab = expression(-log[10]~pvalue))
#signGenes = (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))
points(tab[(abs(tab$logFC) > lfc), ], pch = 16, cex = 0.8, col = "orange")
points(tab[(tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "green")
points(tab[(abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "red")
abline(h = -log10(pval), col = "green3", lty = 2)
abline(v = c(-lfc, lfc), col = "blue", lty = 2)
mtext(paste("pval =", pval), side = 4, at = -log10(pval), cex = 0.8, line = 0.5, las = 1)
mtext(c(paste("-", lfc, "fold"), paste("+", lfc, "fold")), side = 3, at = c(-lfc, lfc), cex = 0.8, line = 0.5)
with(subset(tab2, negLogPval > -log10(pval) & abs(logFC)>lfc), textxy(logFC, negLogPval, labs=Gene, cex=.4))
dev.off()
pdf(file = paste("Code/Results/VolcanoPlot.pdf", sep = ""),  width = 9, height = 4.5)
par(mar = c(5, 4, 4, 5))
plot(tab, pch = 16, cex = 0.6, xlab = expression(log[2]~fold~change), ylab = expression(-log[10]~pvalue))
#signGenes = (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))
points(tab[(abs(tab$logFC) > lfc), ], pch = 16, cex = 0.8, col = "orange")
points(tab[(tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "green")
points(tab[(abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "red")
abline(h = -log10(pval), col = "green3", lty = 2)
abline(v = c(-lfc, lfc), col = "blue", lty = 2)
mtext(paste("pval =", pval), side = 4, at = -log10(pval), cex = 0.8, line = 0.5, las = 1)
mtext(c(paste("-", lfc, "fold"), paste("+", lfc, "fold")), side = 3, at = c(-lfc, lfc), cex = 0.8, line = 0.5)
with(subset(tab2, negLogPval > -log10(pval) & abs(logFC)>lfc), textxy(logFC, negLogPval, labs=Gene, cex=.4))
dev.off()
source('~/Universidad/HAB/Aurelio/FlujoCancerMama/Code/Options/2_1_SubsettingTumourSubtypes.R', encoding = 'UTF-8')
source('~/Universidad/HAB/Aurelio/FlujoCancerMama/Code/Options/3_DEA.R')
pdf(file = paste("Code/Results/VolcanoPlot", label, ".pdf", sep = ""),  width = 9, height = 4.5)
par(mar = c(5, 4, 4, 5))
plot(tab, pch = 16, cex = 0.6, xlab = expression(log[2]~fold~change), ylab = expression(-log[10]~pvalue))
#signGenes = (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))
points(tab[(abs(tab$logFC) > lfc), ], pch = 16, cex = 0.8, col = "orange")
points(tab[(tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "green")
points(tab[(abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "red")
abline(h = -log10(pval), col = "green3", lty = 2)
abline(v = c(-lfc, lfc), col = "blue", lty = 2)
mtext(paste("pval =", pval), side = 4, at = -log10(pval), cex = 0.8, line = 0.5, las = 1)
mtext(c(paste("-", lfc, "fold"), paste("+", lfc, "fold")), side = 3, at = c(-lfc, lfc), cex = 0.8, line = 0.5)
with(subset(tab2, negLogPval > -log10(pval) & abs(logFC)>lfc), textxy(logFC, negLogPval, labs=Gene, cex=.4))
dev.off()
source('~/Universidad/HAB/Aurelio/FlujoCancerMama/Code/Options/2_1_SubsettingTumourSubtypes.R', encoding = 'UTF-8')
source('~/Universidad/HAB/Aurelio/FlujoCancerMama/Code/Options/3_DEA.R')
pdf(file = paste("Code/Results/VolcanoPlot", ".pdf", sep = ""),  width = 9, height = 4.5)
par(mar = c(5, 4, 4, 5))
plot(tab, pch = 16, cex = 0.6, xlab = expression(log[2]~fold~change), ylab = expression(-log[10]~pvalue))
#signGenes = (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))
points(tab[(abs(tab$logFC) > lfc), ], pch = 16, cex = 0.8, col = "orange")
points(tab[(tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "green")
points(tab[(abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "red")
abline(h = -log10(pval), col = "green3", lty = 2)
abline(v = c(-lfc, lfc), col = "blue", lty = 2)
mtext(paste("pval =", pval), side = 4, at = -log10(pval), cex = 0.8, line = 0.5, las = 1)
mtext(c(paste("-", lfc, "fold"), paste("+", lfc, "fold")), side = 3, at = c(-lfc, lfc), cex = 0.8, line = 0.5)
with(subset(tab2, negLogPval > -log10(pval) & abs(logFC)>lfc), textxy(logFC, negLogPval, labs=Gene, cex=.4))
dev.off()
pdf(file = paste("Code/Results/VolcanoPlot", label, ".pdf", sep = ""),  width = 9, height = 4.5)
par(mar = c(5, 4, 4, 5))
plot(tab, pch = 16, cex = 0.6, xlab = expression(log[2]~fold~change), ylab = expression(-log[10]~pvalue))
#signGenes = (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))
points(tab[(abs(tab$logFC) > lfc), ], pch = 16, cex = 0.8, col = "orange")
points(tab[(tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "green")
points(tab[(abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "red")
abline(h = -log10(pval), col = "green3", lty = 2)
abline(v = c(-lfc, lfc), col = "blue", lty = 2)
mtext(paste("pval =", pval), side = 4, at = -log10(pval), cex = 0.8, line = 0.5, las = 1)
mtext(c(paste("-", lfc, "fold"), paste("+", lfc, "fold")), side = 3, at = c(-lfc, lfc), cex = 0.8, line = 0.5)
with(subset(tab2, negLogPval > -log10(pval) & abs(logFC)>lfc), textxy(logFC, negLogPval, labs=Gene, cex=.4))
dev.off()
pdf(file = paste("Code/Results/VolcanoPlotUno_Contra_oTRO", label, ".pdf", sep = ""),  width = 9, height = 4.5)
par(mar = c(5, 4, 4, 5))
plot(tab, pch = 16, cex = 0.6, xlab = expression(log[2]~fold~change), ylab = expression(-log[10]~pvalue))
#signGenes = (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))
points(tab[(abs(tab$logFC) > lfc), ], pch = 16, cex = 0.8, col = "orange")
points(tab[(tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "green")
points(tab[(abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "red")
abline(h = -log10(pval), col = "green3", lty = 2)
abline(v = c(-lfc, lfc), col = "blue", lty = 2)
mtext(paste("pval =", pval), side = 4, at = -log10(pval), cex = 0.8, line = 0.5, las = 1)
mtext(c(paste("-", lfc, "fold"), paste("+", lfc, "fold")), side = 3, at = c(-lfc, lfc), cex = 0.8, line = 0.5)
with(subset(tab2, negLogPval > -log10(pval) & abs(logFC)>lfc), textxy(logFC, negLogPval, labs=Gene, cex=.4))
dev.off()
pdf(file = paste("Code/Results/VolcanoPlotUnoContraOTRO", label, ".pdf", sep = ""),  width = 9, height = 4.5)
par(mar = c(5, 4, 4, 5))
plot(tab, pch = 16, cex = 0.6, xlab = expression(log[2]~fold~change), ylab = expression(-log[10]~pvalue))
#signGenes = (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))
points(tab[(abs(tab$logFC) > lfc), ], pch = 16, cex = 0.8, col = "orange")
points(tab[(tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "green")
points(tab[(abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "red")
abline(h = -log10(pval), col = "green3", lty = 2)
abline(v = c(-lfc, lfc), col = "blue", lty = 2)
mtext(paste("pval =", pval), side = 4, at = -log10(pval), cex = 0.8, line = 0.5, las = 1)
mtext(c(paste("-", lfc, "fold"), paste("+", lfc, "fold")), side = 3, at = c(-lfc, lfc), cex = 0.8, line = 0.5)
with(subset(tab2, negLogPval > -log10(pval) & abs(logFC)>lfc), textxy(logFC, negLogPval, labs=Gene, cex=.4))
dev.off()
pdf(file = paste("Code/Results/VolcanoPlotUnoContraOTRO", ".pdf", sep = ""),  width = 9, height = 4.5)
par(mar = c(5, 4, 4, 5))
plot(tab, pch = 16, cex = 0.6, xlab = expression(log[2]~fold~change), ylab = expression(-log[10]~pvalue))
#signGenes = (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))
points(tab[(abs(tab$logFC) > lfc), ], pch = 16, cex = 0.8, col = "orange")
points(tab[(tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "green")
points(tab[(abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "red")
abline(h = -log10(pval), col = "green3", lty = 2)
abline(v = c(-lfc, lfc), col = "blue", lty = 2)
mtext(paste("pval =", pval), side = 4, at = -log10(pval), cex = 0.8, line = 0.5, las = 1)
pdf(file = paste("Code/Results/VolcanoPlotUno_Contra",".pdf", sep = ""),  width = 9, height = 4.5)
par(mar = c(5, 4, 4, 5))
plot(tab, pch = 16, cex = 0.6, xlab = expression(log[2]~fold~change), ylab = expression(-log[10]~pvalue))
#signGenes = (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))
points(tab[(abs(tab$logFC) > lfc), ], pch = 16, cex = 0.8, col = "orange")
points(tab[(tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "green")
points(tab[(abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval)), ], pch = 16, cex = 0.8, col = "red")
abline(h = -log10(pval), col = "green3", lty = 2)
abline(v = c(-lfc, lfc), col = "blue", lty = 2)
mtext(paste("pval =", pval), side = 4, at = -log10(pval), cex = 0.8, line = 0.5, las = 1)
mtext(c(paste("-", lfc, "fold"), paste("+", lfc, "fold")), side = 3, at = c(-lfc, lfc), cex = 0.8, line = 0.5)
with(subset(tab2, negLogPval > -log10(pval) & abs(logFC)>lfc), textxy(logFC, negLogPval, labs=Gene, cex=.4))
dev.off()
dev.off()
